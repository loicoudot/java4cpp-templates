<?xml version="1.0" encoding="UTF-8"?>
<templates xmlns="http://java4cpp.loicoudot.github.com"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java4cpp.loicoudot.github.com https://raw.github.com/loicoudot/java4cpp-core/master/templates.xsd">
	<sourceTemplates>
		<sourceTemplate>enum-template.ftl</sourceTemplate>
		<sourceTemplate>header-template.ftl</sourceTemplate>
		<sourceTemplate>source-template.ftl</sourceTemplate>
	</sourceTemplates>
	<globalTemplates>
		<globalTemplate>include-template.ftl</globalTemplate>
		<globalTemplate>exception-template.ftl</globalTemplate>
	</globalTemplates>
	<datatypes>
		<fallback>
			<cppType>const ${class.cppFullName}&amp;</cppType>
			<cppReturnType>${class.cppFullName}</cppReturnType>
			<dependencies>${class.addDependency(class.javaName)}</dependencies>
			<functions>
				<function name="java2cpp">${class.cppFullName} ${arg2} = ${class.cppFullName}(${arg1});
				javaEnv->DeleteLocalRef(${arg1});
				</function>
				<function name="cpp2java">${class.jniSignature} ${arg2} = ${arg1}.getJavaObject();
				</function>
			</functions>
		</fallback>
		<array>
			<cppType>const std::vector&lt;${class.innerType.cppReturnType} &gt;&amp;</cppType>
			<cppReturnType>std::vector&lt;${class.innerType.cppReturnType} &gt;</cppReturnType>
			<dependencies>${class.addInclude("&lt;vector&gt;")}&lt;#assign current = class.innerType&gt;&lt;#list 1..20 as x&gt;&lt;#if current.isPrimitive&gt;&lt;#break/&gt;&lt;#elseif !current.isArray&gt;${class.addDependency(current)}&lt;/#if&gt;&lt;#if !current.innerType??&gt;&lt;#break/&gt;&lt;/#if&gt;&lt;#assign current = current.innerType&gt;&lt;/#list&gt;</dependencies>
			<functions>
				<function name="java2cpp">&lt;#if class.innerType.jniMethodName == "Object"&gt;
				std::vector&lt;${class.innerType.cppReturnType} &gt; ${arg2};
				jsize ${arg1}size = javaEnv->GetArrayLength((jobjectArray)${arg1});
				for(int i = 0; i &lt; ${arg1}size; ++i) {
				jobject ${arg1}elem = javaEnv->GetObjectArrayElement((jobjectArray)${arg1}, i);
				${class.innerType.functions.java2cpp("${arg1}elem", "${arg2}tmp")}
				${arg2}.push_back(${arg2}tmp);
				javaEnv->DeleteLocalRef(${arg1}elem);
				}
				javaEnv->DeleteLocalRef(${arg1});
				&lt;#else&gt;
				${class.innerType.cppReturnType}* ${arg2}values = (${class.innerType.cppReturnType}*)javaEnv->Get${class.innerType.jniMethodName}ArrayElements((${class.jniSignature})${arg1}, NULL);
				std::vector&lt;${class.innerType.cppReturnType} &gt; ${arg2}(${arg2}values, ${arg2}values+javaEnv->GetArrayLength((${class.jniSignature})${arg1}));
				javaEnv->Release${class.innerType.jniMethodName}ArrayElements((${class.jniSignature})${arg1}, (${class.innerType.jniSignature}*)${arg2}values, JNI_ABORT);
				javaEnv->DeleteLocalRef(${arg1});
				&lt;/#if&gt;
				</function>
				<function name="cpp2java">&lt;#if class.innerType.jniMethodName == "Object"&gt;
				jclass ${arg2}cls = Java4CppRuntime::getClass(javaEnv, "${class.innerType.javaName?replace('.', '/')}");
				jobjectArray ${arg2} = javaEnv->NewObjectArray((jsize)${arg1}.size(), ${arg2}cls, NULL);
				for(jsize ${arg2}idx = 0; ${arg2}idx &lt; (jsize)${arg1}.size(); ++${arg2}idx) {
					${class.innerType.functions.cpp2java("${arg1}[${arg2}idx]", "${arg2}elem")}
					javaEnv->SetObjectArrayElement(${arg2}, ${arg2}idx, ${arg2}elem);
					&lt;#if class.innerType.functions.cpp2javaClean??&gt;${class.innerType.functions.cpp2javaClean("${arg2}elem")}&lt;/#if&gt;
				}
				&lt;#elseif class.innerType.jniMethodName == "Boolean"&gt;
				${class.jniSignature} ${arg2} = javaEnv->New${class.innerType.jniMethodName}Array((jsize)${arg1}.size());
				for(jsize ${arg2}idx = 0; ${arg2}idx &lt; (jsize)${arg1}.size(); ++${arg2}idx) {
					${class.innerType.functions.cpp2java("${arg1}[${arg2}idx]", "${arg2}elem")}
					javaEnv->Set${class.innerType.jniMethodName}ArrayRegion(${arg2}, ${arg2}idx, 1, (${class.innerType.jniSignature}*)&amp;${arg2}elem);
					&lt;#if class.innerType.functions.cpp2javaClean??&gt;${class.innerType.functions.cpp2javaClean("${arg2}elem")};&lt;/#if&gt;
				}
				&lt;#else&gt;
				${class.jniSignature} ${arg2} = javaEnv->New${class.innerType.jniMethodName}Array((jsize)${arg1}.size());
				javaEnv->Set${class.innerType.jniMethodName}ArrayRegion(${arg2}, 0, (jsize)${arg1}.size(), (${class.innerType.jniSignature}*)&amp;${arg1}[0]);
				&lt;/#if&gt;
				</function>
				<function name="cpp2javaClean">javaEnv->DeleteLocalRef(${arg1});
				</function>
			</functions>
		</array>
		<enum>
			<cppType>${class.cppFullName}&lt;#if !class.isInnerClass&gt;Enum&lt;/#if&gt;::${class.cppShortName}Enum</cppType>
			<dependencies>${class.addDependency(class.javaName)}</dependencies>
			<functions>
				<function name="java2cpp">jclass enumcls = Java4CppRuntime::getClass(javaEnv, "${class.javaName?replace('.', '/')}");
				jmethodID ordinal = Java4CppRuntime::getMethodID(javaEnv, enumcls, "ordinal", "()I");
				${class.cppFullName}&lt;#if !class.isInnerClass&gt;Enum&lt;/#if&gt;::${class.cppShortName}Enum ${arg2} = (${class.cppFullName}&lt;#if !class.isInnerClass&gt;Enum&lt;/#if&gt;::${class.cppShortName}Enum)javaEnv->CallIntMethod(${arg1}, ordinal);
				</function>
				<function name="cpp2java">jclass ${arg2}cls = Java4CppRuntime::getClass(javaEnv, "${class.javaName?replace('.', '/')}");
				jmethodID ${arg2}values = Java4CppRuntime::getStaticMethodID(javaEnv, ${arg2}cls, "values", "()[${class.javaSignature}");
      			jobjectArray ${arg2}array = (jobjectArray)javaEnv->CallStaticObjectMethod(${arg2}cls, ${arg2}values);
      			jobject ${arg2} = javaEnv->GetObjectArrayElement(${arg2}array, (jsize)${arg1});
				</function>
				<function name="cpp2javaClean">javaEnv->DeleteLocalRef(${arg1});
				javaEnv->DeleteLocalRef(${arg1}array);
				</function>
			</functions>
		</enum>
		<templates>
			<template class="void">
				<cppType>void</cppType>
			</template>
			<template class="boolean">
				<cppType>bool</cppType>
				<functions>
					<function name="java2cpp">bool ${arg2} = ${arg1} == JNI_TRUE;</function>
					<function name="cpp2java">${class.jniSignature} ${arg2} = (${class.jniSignature})${arg1};</function>
				</functions>
			</template>
			<template class="byte">
				<cppType>signed char</cppType>
				<functions>
					<function name="java2cpp">signed char ${arg2} = (signed char)${arg1};</function>
					<function name="cpp2java">${class.jniSignature} ${arg2} = (${class.jniSignature})${arg1};</function>
				</functions>
			</template>
			<template class="char">
				<cppType>char</cppType>
				<functions>
					<function name="java2cpp">char ${arg2} = (char)${arg1};</function>
					<function name="cpp2java">${class.jniSignature} ${arg2} = (${class.jniSignature})${arg1};</function>
				</functions>
			</template>
			<template class="double">
				<cppType>double</cppType>
				<functions>
					<function name="java2cpp">double ${arg2} = (double)${arg1};</function>
					<function name="cpp2java">${class.jniSignature} ${arg2} = (${class.jniSignature})${arg1};</function>
				</functions>
			</template>
			<template class="float">
				<cppType>float</cppType>
				<functions>
					<function name="java2cpp">float ${arg2} = (float)${arg1};</function>
					<function name="cpp2java">${class.jniSignature} ${arg2} = (${class.jniSignature})${arg1};</function>
				</functions>
			</template>
			<template class="int">
				<cppType>int</cppType>
				<functions>
					<function name="java2cpp">int ${arg2} = (int)${arg1};</function>
					<function name="cpp2java">${class.jniSignature} ${arg2} = (${class.jniSignature})${arg1};</function>
				</functions>
			</template>
			<template class="long">
				<cppType>long long</cppType>
				<functions>
					<function name="java2cpp">long long ${arg2} = (long long)${arg1};</function>
					<function name="cpp2java">${class.jniSignature} ${arg2} = (${class.jniSignature})${arg1};</function>
				</functions>
			</template>
			<template class="short">
				<cppType>short</cppType>
				<functions>
					<function name="java2cpp">short ${arg2} = (short)${arg1};</function>
					<function name="cpp2java">${class.jniSignature} ${arg2} = (${class.jniSignature})${arg1};</function>
				</functions>
			</template>
		</templates>
	</datatypes>
	<copyFiles>
		<copyFile>java4cpp_runtime.h</copyFile>
		<copyFile>java4cpp_runtime.cpp</copyFile>
		<copyFile>java_exceptions.h</copyFile>
		<copyFile>jvm_launcher.h</copyFile>
		<copyFile>jvm_launcher.cpp</copyFile>
	</copyFiles>
</templates>