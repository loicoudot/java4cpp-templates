<?xml version="1.0" encoding="UTF-8"?>
<templates xmlns="http://java4cpp.loicoudot.github.com"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java4cpp.loicoudot.github.com https://raw.github.com/loicoudot/java4cpp-core/master/templates.xsd">
	<sourceTemplates>
		<sourceTemplate>enum-template.ftl</sourceTemplate>
		<sourceTemplate>header-template.ftl</sourceTemplate>
		<sourceTemplate>source-template.ftl</sourceTemplate>
	</sourceTemplates>
	<globalTemplates>
		<globalTemplate>include-template.ftl</globalTemplate>
		<globalTemplate>exception-template.ftl</globalTemplate>
	</globalTemplates>
	<datatypes>
		<fallback>
			<cppType>const ${cppFullName}&amp;</cppType>
			<cppReturnType>${cppFullName}</cppReturnType>
			<dependencies>${addDependency(javaName)}</dependencies>
			<functions>
				<function name="java2cpp">${cppFullName} ${functions.arg1} = ${cppFullName}(${functions.arg2});
				javaEnv->DeleteLocalRef(${functions.arg2});
				</function>
				<function name="cpp2java">${jniSignature} ${functions.arg1} = ${functions.arg2}.getJavaObject();
				</function>
			</functions>
		</fallback>
		<array>
			<cppType>const std::vector&lt;${innerType.cppReturnType} &gt;&amp;</cppType>
			<cppReturnType>std::vector&lt;${innerType.cppReturnType} &gt;</cppReturnType>
			<dependencies>${addInclude("&lt;vector&gt;")}&lt;#assign current = innerType&gt;&lt;#list 1..20 as x&gt;&lt;#if current.isPrimitive&gt;&lt;#break/&gt;&lt;#elseif !current.isArray&gt;${addDependency(current)}&lt;/#if&gt;&lt;#if !current.innerType??&gt;&lt;#break/&gt;&lt;/#if&gt;&lt;#assign current = current.innerType&gt;&lt;/#list&gt;</dependencies>
			<functions>
				<function name="java2cpp">&lt;#if innerType.jniMethodName == "Object"&gt;
				std::vector&lt;${innerType.cppReturnType} &gt; ${functions.arg1};
				jsize ${functions.arg1}size = javaEnv->GetArrayLength((jobjectArray)${functions.arg2});
				for(int i = 0; i &lt; ${functions.arg1}size; ++i) {
				jobject ${functions.arg1}elem = javaEnv->GetObjectArrayElement((jobjectArray)${functions.arg2}, i);
				${innerType.functions.java2cpp("${functions.arg1}tmp", "${functions.arg1}elem")}
				${functions.arg1}.push_back(${functions.arg1}tmp);
				javaEnv->DeleteLocalRef(${functions.arg1}elem);
				}
				&lt;#else&gt;
				${innerType.cppReturnType}* ${functions.arg1}values = (${innerType.cppReturnType}*)javaEnv->Get${innerType.jniMethodName}ArrayElements((${jniSignature})${functions.arg2}, NULL);
				std::vector&lt;${innerType.cppReturnType} &gt; ${functions.arg1}(${functions.arg1}values, ${functions.arg1}values+javaEnv->GetArrayLength((${jniSignature})${functions.arg2}));
				javaEnv->Release${innerType.jniMethodName}ArrayElements((${jniSignature})${functions.arg2}, (${innerType.jniSignature}*)${functions.arg1}values, JNI_ABORT);
				&lt;/#if&gt;
				</function>
				<function name="cpp2java">&lt;#if innerType.jniMethodName == "Object"&gt;
				jclass ${functions.arg1}cls = Java4CppRuntime::getClass(javaEnv, "${innerType.javaName?replace('.', '/')}");
				jobjectArray ${functions.arg1} = javaEnv->NewObjectArray((jsize)${functions.arg2}.size(), ${functions.arg1}cls, NULL);
				for(jsize ${functions.arg1}idx = 0; ${functions.arg1}idx &lt; (jsize)${functions.arg2}.size(); ++${functions.arg1}idx) {
					${innerType.functions.cpp2java("${functions.arg1}elem", "${functions.arg2}[${functions.arg1}idx]")}
					javaEnv->SetObjectArrayElement(${functions.arg1}, ${functions.arg1}idx, ${functions.arg1}elem);
					&lt;#if innerType.functions.cpp2javaClean??&gt;${innerType.functions.cpp2javaClean("${functions.arg1}elem")}&lt;/#if&gt;
				}
				&lt;#elseif innerType.jniMethodName == "Boolean"&gt;
				${jniSignature} ${functions.arg1} = javaEnv->New${innerType.jniMethodName}Array((jsize)${functions.arg2}.size());
				for(jsize ${functions.arg1}idx = 0; ${functions.arg1}idx &lt; (jsize)${functions.arg2}.size(); ++${functions.arg1}idx) {
					${innerType.functions.cpp2java("${functions.arg1}elem", "${functions.arg2}[${functions.arg1}idx]")}
					javaEnv->Set${innerType.jniMethodName}ArrayRegion(${functions.arg1}, ${functions.arg1}idx, 1, (${innerType.jniSignature}*)&amp;${functions.arg1}elem);
					&lt;#if innerType.functions.cpp2javaClean??&gt;${innerType.functions.cpp2javaClean("${functions.arg1}elem")};&lt;/#if&gt;
				}
				&lt;#else&gt;
				${jniSignature} ${functions.arg1} = javaEnv->New${innerType.jniMethodName}Array((jsize)${functions.arg2}.size());
				javaEnv->Set${innerType.jniMethodName}ArrayRegion(${functions.arg1}, 0, (jsize)${functions.arg2}.size(), (${innerType.jniSignature}*)&amp;${functions.arg2}[0]);
				&lt;/#if&gt;
				</function>
				<function name="cpp2javaClean">javaEnv->DeleteLocalRef(${functions.arg1});
				</function>
			</functions>
		</array>
		<enum>
			<cppType>${cppFullName}&lt;#if !isInnerClass&gt;Enum&lt;/#if&gt;::${cppShortName}Enum</cppType>
			<dependencies>${addDependency(javaName)}</dependencies>
			<functions>
				<function name="java2cpp">jclass enumcls = Java4CppRuntime::getClass(javaEnv, "${javaName?replace('.', '/')}");
				jmethodID ordinal = Java4CppRuntime::getMethodID(javaEnv, enumcls, "ordinal", "()I");
				${cppFullName}&lt;#if !isInnerClass&gt;Enum&lt;/#if&gt;::${cppShortName}Enum ${functions.arg1} = (${cppFullName}&lt;#if !isInnerClass&gt;Enum&lt;/#if&gt;::${cppShortName}Enum)javaEnv->CallIntMethod(${functions.arg2}, ordinal);
				</function>
				<function name="cpp2java">jclass ${functions.arg1}cls = Java4CppRuntime::getClass(javaEnv, "${javaName?replace('.', '/')}");
				jmethodID ${functions.arg1}values = Java4CppRuntime::getStaticMethodID(javaEnv, ${functions.arg1}cls, "values", "()[${javaSignature}");
      			jobjectArray ${functions.arg1}array = (jobjectArray)javaEnv->CallStaticObjectMethod(${functions.arg1}cls, ${functions.arg1}values);
      			jobject ${functions.arg1} = javaEnv->GetObjectArrayElement(${functions.arg1}array, (jsize)${functions.arg2});
				</function>
				<function name="cpp2javaClean">javaEnv->DeleteLocalRef(${functions.arg1});
				javaEnv->DeleteLocalRef(${functions.arg1}array);
				</function>
			</functions>
		</enum>
		<templates>
			<template class="void">
				<cppType>void</cppType>
			</template>
			<template class="boolean">
				<cppType>bool</cppType>
				<functions>
					<function name="java2cpp">bool ${functions.arg1} = (bool)${functions.arg2};</function>
					<function name="cpp2java">${jniSignature} ${functions.arg1} = (${jniSignature})${functions.arg2};</function>
				</functions>
			</template>
			<template class="byte">
				<cppType>signed char</cppType>
				<functions>
					<function name="java2cpp">signed char ${functions.arg1} = (signed char)${functions.arg2};</function>
					<function name="cpp2java">${jniSignature} ${functions.arg1} = (${jniSignature})${functions.arg2};</function>
				</functions>
			</template>
			<template class="char">
				<cppType>char</cppType>
				<functions>
					<function name="java2cpp">char ${functions.arg1} = (char)${functions.arg2};</function>
					<function name="cpp2java">${jniSignature} ${functions.arg1} = (${jniSignature})${functions.arg2};</function>
				</functions>
			</template>
			<template class="double">
				<cppType>double</cppType>
				<functions>
					<function name="java2cpp">double ${functions.arg1} = (double)${functions.arg2};</function>
					<function name="cpp2java">${jniSignature} ${functions.arg1} = (${jniSignature})${functions.arg2};</function>
				</functions>
			</template>
			<template class="float">
				<cppType>float</cppType>
				<functions>
					<function name="java2cpp">float ${functions.arg1} = (float)${functions.arg2};</function>
					<function name="cpp2java">${jniSignature} ${functions.arg1} = (${jniSignature})${functions.arg2};</function>
				</functions>
			</template>
			<template class="int">
				<cppType>int</cppType>
				<functions>
					<function name="java2cpp">int ${functions.arg1} = (int)${functions.arg2};</function>
					<function name="cpp2java">${jniSignature} ${functions.arg1} = (${jniSignature})${functions.arg2};</function>
				</functions>
			</template>
			<template class="long">
				<cppType>long long</cppType>
				<functions>
					<function name="java2cpp">long long ${functions.arg1} = (long long)${functions.arg2};</function>
					<function name="cpp2java">${jniSignature} ${functions.arg1} = (${jniSignature})${functions.arg2};</function>
				</functions>
			</template>
			<template class="short">
				<cppType>short</cppType>
				<functions>
					<function name="java2cpp">short ${functions.arg1} = (short)${functions.arg2};</function>
					<function name="cpp2java">${jniSignature} ${functions.arg1} = (${jniSignature})${functions.arg2};</function>
				</functions>
			</template>
		</templates>
	</datatypes>
	<copyFiles>
		<copyFile>java4cpp_runtime.h</copyFile>
		<copyFile>java4cpp_runtime.cpp</copyFile>
		<copyFile>java_exceptions.h</copyFile>
		<copyFile>jvm_launcher.h</copyFile>
		<copyFile>jvm_launcher.cpp</copyFile>
	</copyFiles>
</templates>